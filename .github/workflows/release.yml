name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            filename: darwin
          - os: ubuntu-latest
            filename: linux
          - os: windows-latest
            filename: win32

    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Installing needed Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
          sudo apt-get install -y libx11-dev

      - name: Cache LLVM and Clang
        if: matrix.os == 'windows-latest'
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/llvm
          key: ${{ matrix.os }}-llvm-10.0

      - name: Install LLVM and Clang
        if: matrix.os == 'windows-latest'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: ${{ runner.temp }}/llvm
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions/setup-node@v1
        with:
          node-version: "12"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ matrix.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ matrix.os }}-yarn-
      - uses: actions/cache@v2
        id: cargo-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            native/target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: yarn

      - name: Build
        if: matrix.os != 'windows-latest'
        run: yarn build-native

      - name: Build
        if: matrix.os == 'windows-latest'
        run: yarn build-native
        env:
          LIBCLANG_PATH: ${{ runner.temp }}/llvm/bin

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.filename }}
          path: native/index.node

  release:
    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    name: Release
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: download build
        uses: actions/download-artifact@v2
        with:
          path: .artifact
      - name: Copy file
        run: |
          mkdir -p build
          cp .artifact/darwin/index.node build/darwin.node
          cp .artifact/linux/index.node  build/linux.node
          cp .artifact/win32/index.node  build/win32.node

      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - name: Install gulp-cli and vsce
        run: npm i gulp-cli vsce -g

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ matrix.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ matrix.os }}-yarn-

      - name: Package
        run: |
          yarn
          vsce package --yarn
          echo "VSIX_PATH=$(find . -maxdepth 1 -type f -iname "*.vsix" | head -1)" >> $GITHUB_ENV
          echo "VSIX_NAME=$(basename $(find . -maxdepth 1 -type f -iname "*.vsix" | head -1))" >> $GITHUB_ENV

      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: See [CHANGE LOG](https://github.com/YXL76/cloudmusic-vscode/blob/master/CHANGELOG.md) for details.
          draft: false
          prerelease: false

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.VSIX_PATH }}
          asset_name: ${{ env.VSIX_NAME }}
          asset_content_type: application/zip
      - name: Publish
        run: |
          yarn
          vsce publish -p ${{ secrets.VSCE_TOKEN }} --yarn
