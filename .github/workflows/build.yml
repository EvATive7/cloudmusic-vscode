name: Build

on:
  push:
    paths:
      - "src/native/*"
      - "src/native/*"
      - "src/lib.rs"
      - "Cargo.*"
      - ".github/workflows/build.yml"
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Installing needed Ubuntu dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
          sudo apt-get install -y libx11-dev

      - name: Cache LLVM and Clang
        if: runner.os == 'Windows'
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/llvm
          key: ${{ runner.os }}-llvm-10.0

      - name: Install LLVM and Clang
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: ${{ runner.temp }}/llvm
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions/setup-node@v1
        with:
          node-version: "12"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/cache@v2
        id: cargo-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: yarn

      - name: Build
        if: runner.os != 'Windows'
        run: yarn build-native

      - name: Build
        if: runner.os == 'Windows'
        run: yarn build-native
        env:
          LIBCLANG_PATH: ${{ runner.temp }}/llvm/bin

      - uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: ${{ runner.os }}
          path: target/release/libnative.so
      - uses: actions/upload-artifact@v2
        if: runner.os == 'Windows'
        with:
          name: ${{ runner.os }}
          path: target/release/native.dll
      - uses: actions/upload-artifact@v2
        if: runner.os == 'macOS'
        with:
          name: ${{ runner.os }}
          path: target/release/libnative.dylib
